#include <stdlib.h>
#include "matmul.h"

Matrix Allocate2ndMatrix(int height, int width, int init);

void matmul( float*, const float*, const float*, unsigned int, unsigned int, unsigned int);

////////////////////////////////////////////////////////////////////////////////
//! C = A * B
//! @param C          result matrix
//! @param A          matrix A 
//! @param B          matrix B
//! @param hA         height of matrix A
//! @param wB         width of matrix B
////////////////////////////////////////////////////////////////////////////////

/* You'll need to modify this function such that matrix B is accessed
 * correctly once you change the memory layout to column-major. */
void matmul(float* C, const float* A, const float* B, unsigned int hA, 
    unsigned int wA, unsigned int wB)
{
	for (unsigned int i = 0; i<wA*wB; i++) {
		C[i] = 0;
	}
  unsigned int tb = 16;
  for (unsigned int i = 0; i < hA; i+=tb)
    for (unsigned int j = 0; j < wB; j+=tb) {
      for (unsigned int k = 0; k < wA; ++k) {
	      for (unsigned int ii = i; ii < (wA<(i+tb)?wA:(i+tb)); ii++) {
			      for (unsigned int jj = j; jj < (wA<(j+tb)?wA:(j+tb)); jj++) {
				      C[wA*k+jj] += A[wA*k+ii]*B[wA*jj+ii];
			      }
		} 
      }
  }
}

// Allocate a matrix of dimensions height*width
Matrix Allocate2ndMatrix(int height, int width)
{
  Matrix M;
  M.width = M.pitch = width;
  M.height = height;
  int size = M.width * M.height;
  M.elements = NULL;

  M.elements = (float*) malloc(size*sizeof(float));

  /* This is a row-major allocation and initialization.
   * You need to modify this function which is only called
   * for Matrix B such that a column-major ordering is
   * performed. */
/*  for(unsigned int i = 0; i < M.height * M.width; i++)
  {
    M.elements[i] = (rand() / (float)RAND_MAX);
  }*/

  for(unsigned int i = 0; i < M.height; i++)
  {
    for(unsigned int j = 0; j < M.width; j++)
    {
      M.elements[i + j * M.width] = (rand() / (float)RAND_MAX);
    }
  }
  return M;
}	

